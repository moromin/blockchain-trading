// Code generated by sqlc. DO NOT EDIT.
// source: currency.sql

package db

import (
	"context"
)

const getCurrency = `-- name: GetCurrency :one
SELECT id, coin, name FROM currencies
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCurrency(ctx context.Context, name string) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrency, name)
	var i Currency
	err := row.Scan(&i.ID, &i.Coin, &i.Name)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, coin, name FROM currencies
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCurrenciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCurrencies(ctx context.Context, arg ListCurrenciesParams) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Currency{}
	for rows.Next() {
		var i Currency
		if err := rows.Scan(&i.ID, &i.Coin, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resisterCurrency = `-- name: ResisterCurrency :one
INSERT INTO currencies (
  coin,
  name
) VALUES (
  $1, $2
) RETURNING id, coin, name
`

type ResisterCurrencyParams struct {
	Coin string `json:"coin"`
	Name string `json:"name"`
}

func (q *Queries) ResisterCurrency(ctx context.Context, arg ResisterCurrencyParams) (Currency, error) {
	row := q.db.QueryRowContext(ctx, resisterCurrency, arg.Coin, arg.Name)
	var i Currency
	err := row.Scan(&i.ID, &i.Coin, &i.Name)
	return i, err
}
