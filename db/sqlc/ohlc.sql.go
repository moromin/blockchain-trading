// Code generated by sqlc. DO NOT EDIT.
// source: ohlc.sql

package db

import (
	"context"
	"time"
)

const findBySymbol = `-- name: FindBySymbol :many
SELECT symbol, interval, opentime, open, high, low, close, volume
FROM ohlcs
WHERE symbol = $1
ORDER BY id
`

type FindBySymbolRow struct {
	Symbol   string    `json:"symbol"`
	Interval string    `json:"interval"`
	Opentime time.Time `json:"opentime"`
	Open     string    `json:"open"`
	High     string    `json:"high"`
	Low      string    `json:"low"`
	Close    string    `json:"close"`
	Volume   string    `json:"volume"`
}

func (q *Queries) FindBySymbol(ctx context.Context, symbol string) ([]FindBySymbolRow, error) {
	rows, err := q.db.QueryContext(ctx, findBySymbol, symbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindBySymbolRow{}
	for rows.Next() {
		var i FindBySymbolRow
		if err := rows.Scan(
			&i.Symbol,
			&i.Interval,
			&i.Opentime,
			&i.Open,
			&i.High,
			&i.Low,
			&i.Close,
			&i.Volume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerOHLC = `-- name: RegisterOHLC :one
INSERT INTO ohlcs (
	symbol,
	interval,
	opentime,
	open,
	high,
	low,
	close,
	volume,
	closetime,
	quote_asset_volume,
	number_of_trades,
	taker_buy_base_asset_volume,
	taker_buy_quote_asset_volume
) VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, symbol, interval, opentime, open, high, low, close, volume, closetime, quote_asset_volume, number_of_trades, taker_buy_base_asset_volume, taker_buy_quote_asset_volume
`

type RegisterOHLCParams struct {
	Symbol                   string    `json:"symbol"`
	Interval                 string    `json:"interval"`
	Opentime                 time.Time `json:"opentime"`
	Open                     string    `json:"open"`
	High                     string    `json:"high"`
	Low                      string    `json:"low"`
	Close                    string    `json:"close"`
	Volume                   string    `json:"volume"`
	Closetime                time.Time `json:"closetime"`
	QuoteAssetVolume         string    `json:"quote_asset_volume"`
	NumberOfTrades           int64     `json:"number_of_trades"`
	TakerBuyBaseAssetVolume  string    `json:"taker_buy_base_asset_volume"`
	TakerBuyQuoteAssetVolume string    `json:"taker_buy_quote_asset_volume"`
}

func (q *Queries) RegisterOHLC(ctx context.Context, arg RegisterOHLCParams) (Ohlc, error) {
	row := q.db.QueryRowContext(ctx, registerOHLC,
		arg.Symbol,
		arg.Interval,
		arg.Opentime,
		arg.Open,
		arg.High,
		arg.Low,
		arg.Close,
		arg.Volume,
		arg.Closetime,
		arg.QuoteAssetVolume,
		arg.NumberOfTrades,
		arg.TakerBuyBaseAssetVolume,
		arg.TakerBuyQuoteAssetVolume,
	)
	var i Ohlc
	err := row.Scan(
		&i.ID,
		&i.Symbol,
		&i.Interval,
		&i.Opentime,
		&i.Open,
		&i.High,
		&i.Low,
		&i.Close,
		&i.Volume,
		&i.Closetime,
		&i.QuoteAssetVolume,
		&i.NumberOfTrades,
		&i.TakerBuyBaseAssetVolume,
		&i.TakerBuyQuoteAssetVolume,
	)
	return i, err
}
